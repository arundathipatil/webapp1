{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/home/home.service.ts","webpack:///src/app/components/login/login.component.ts","webpack:///src/app/components/login/login.component.html","webpack:///src/app/components/login/login.service.ts","webpack:///src/app/components/registration/registration.component.ts","webpack:///src/app/components/registration/registration.component.html","webpack:///src/app/components/registration/registration.service.ts","webpack:///src/app/constant/const.ts","webpack:///src/app/core/api.service.ts","webpack:///src/app/models/User.ts","webpack:///src/app/modules/angular-mat/angular-mat.module.ts","webpack:///src/app/services/authentication.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","authService","router","title","loggedIn","currentUserValue","user","JSON","parse","localStorage","getItem","logout","navigate","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","HomeComponent","homervice","route","authenticationService","loggedinUser","queryParams","subscribe","params","firstName","required","lastName","email","userDetailsForm","value","updateUserDetails","data","alert","error","updateUser","HomeService","apiService","get","urls","getUserDeatils","post","providedIn","LoginComponent","formBuilder","loginService","password","nullValidator","loginForm","navigationExtras","login","getUserDeatislFromApi","console","warn","LoginService","userDetails","pwd","name","u","next","asObservable","RegistrationComponent","registrationService","minLength","maxLength","pattern","registrationForm","registerUser","navigateByUrl","confirmControl","confirmPassword","RegistrationService","api","register","constant","ApiService","http","url","User","AngularMatModule","AuthenticationService","currentUserSubject","currentUser","setItem","stringify","removeItem","environment","production","bootstrapModule","err"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegistrationComponent } from './components/registration/registration.component';\nimport { HomeComponent } from './components/home/home.component';\n\n\nconst routes: Routes = [\n  {path: '', component: LoginComponent},\n  {path: 'registration', component: RegistrationComponent},\n  {path: 'home', component: HomeComponent}\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { Component } from '@angular/core';\nimport { Router,  } from '@angular/router';\nimport { AuthenticationService } from './services/authentication.service';\nimport { User } from './models/User';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  title = 'web';\n  user: User;\n  loggedIn: boolean = false;\n  constructor(private authService: AuthenticationService, private router: Router) { \n\n    if (this.authService.currentUserValue) { \n      this.loggedIn = true;\n      this.user = new User();\n      this.user = JSON.parse(localStorage.getItem('currentUser'));\n    };\n  }\n\n\n  logout() {\n    this.authService.logout();\n    this.router.navigate([\"\"]);\n\n  }\n}\n","<mat-toolbar color=\"primary\">\n    Web Application\n    <span style=\"padding-left: 33em;\">\n        <button mat-button [matMenuTriggerFor]=\"menu\">Menu</button>\n        <mat-menu #menu=\"matMenu\">\n        <button mat-menu-item>Edit Profile</button>\n        <button mat-menu-item>Change Password</button>\n        <button mat-menu-item (click)=\"logout()\">Logout</button>\n        </mat-menu>\n    </span>\n</mat-toolbar>\n\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { AuthenticationService } from './services/authentication.service';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AngularMatModule } from './modules/angular-mat/angular-mat.module';\nimport { RegistrationComponent } from './components/registration/registration.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    HomeComponent,\n    RegistrationComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    ReactiveFormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule,\n    AngularMatModule,\n    FormsModule\n  ],\n  providers: [\n    AuthenticationService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, NavigationStart } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { HomeService } from './home.service';\nimport { filter, map } from 'rxjs/operators';\nimport { User } from 'src/app/models/User';\nimport { AuthenticationService } from '../../services/authentication.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  userDetailsForm: FormGroup;\n  firstName: FormControl;\n  lastName: FormControl;\n  email: FormControl;\n  state$: any;\n  loggedinUser: User = new User();\n  constructor(private homervice: HomeService, \n              private route: ActivatedRoute, \n              private authenticationService:AuthenticationService,\n              private router: Router) { }\n\n  ngOnInit(): void {\n    if (!this.authenticationService.currentUserValue) { \n      this.router.navigate([\"\"]);\n    };\n    \n    this.route.queryParams.subscribe(params => {\n      this.loggedinUser[\"firstName\"] = params[\"firstName\"];\n      this.loggedinUser[\"lastName\"] = params[\"lastName\"];\n      this.loggedinUser[\"email\"] = params[\"email\"];\n      this.loggedinUser[\"password\"] = \"\";\n\n      this.firstName = new FormControl(this.loggedinUser.firstName, Validators.required);\n      this.lastName = new FormControl(this.loggedinUser.lastName, Validators.required);\n      this.email = new FormControl(this.loggedinUser.email, [\n      Validators.required,\n      Validators.email\n      ]);\n      this.userDetailsForm = new FormGroup({\n        firstName: this.firstName,\n        lastName: this.lastName,\n        email: this.email\n      })\n  });\n\n   \n    \n  }\n\n  updateUser() {\n    let user: User = new User();\n    user[\"firstName\"] = this.firstName.value;\n    user[\"lastName\"] = this.lastName.value;\n    user[\"email\"] = this.email.value;\n    // user[\"password\"] = this.pa\n    this.homervice.updateUserDetails(user)\n    .subscribe(data=>{\n      alert(\"User details Updated Succesfully\");\n    }, error=>{\n        alert(\"Issue Saving User details\");\n    })\n  }\n\n}\n","<h2>Welcome  {{firstName.value}}</h2>\n<h2>Edit user Details</h2>\n<form [formGroup]=\"userDetailsForm\" (ngSubmit)=\"updateUser()\">\n  <div>\n    <label>\n      First Name:\n      <input id=\"firstName\" type=\"text\" formControlName=\"firstName\">\n    </label>\n    <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\" class=\"alert alert-danger\">\n\n      <div *ngIf=\"firstName.errors.required\" style=\"color: red;\">\n        First Name is required.\n      </div>\n    </div>\n  </div>\n\n\n  <div>\n    <label>\n      Last Name:\n      <input id=\"lastName\" type=\"text\" formControlName=\"lastName\">\n    </label>\n    <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\" class=\"alert alert-danger\">\n\n      <div *ngIf=\"firstName.errors.required\" style=\"color: red;\">\n        Last Name is required.\n      </div>\n    </div>\n  </div>\n\n  <div>\n    <label>\n      User Name:\n      <input id=\"email\" type=\"text\" formControlName=\"email\" disabled>\n    </label>\n    <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger\">\n\n      <div *ngIf=\"email.errors.required\" style=\"color: red;\">\n        Last Name is required.\n      </div>\n      <div *ngIf=\"email.errors.email\" style=\"color: red;\">\n        Please provide a valid email id\n      </div>\n    </div>\n  </div>\n\n  <button type=\"submit\" [disabled]=\"!userDetailsForm.valid\">Submit</button>\n\n</form>\n","import { Injectable } from '@angular/core';\nimport { ApiService } from '../../core/api.service';\nimport { constant } from '../../constant/const';\nimport { User } from '../../models/User';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HomeService {\n\n  constructor(private apiService: ApiService) { }\n\n  getUserDetails(email: any) {\n    return this.apiService.get(constant.urls.getUserDeatils + \"?email=\"+email);\n  }\n\n  updateUserDetails(user: User) {\n     return this.apiService.post(constant.urls.updateUserDetails, user);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, NavigationExtras } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\nimport { first } from 'rxjs/operators';\nimport {AuthenticationService} from '../../services/authentication.service';\nimport { LoginService } from './login.service';\nimport { User } from 'src/app/models/User';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n\n  email : FormControl = new FormControl('', Validators.required);\n  password: FormControl = new FormControl('', [Validators.required, Validators.nullValidator])\n\n  loginForm : FormGroup = new FormGroup({\n        email: this.email,\n        password: this.password\n  });\n  \n    ngOnInit() {\n    }\n\n    constructor(\n        private formBuilder: FormBuilder,\n        private route: ActivatedRoute,\n        private router: Router,\n        private authenticationService: AuthenticationService,\n        private loginService: LoginService\n    ) {\n        // redirect to home if already logged in\n        if (this.authenticationService.currentUserValue) { \n          let user = new User();\n          user = JSON.parse(localStorage.getItem('currentUser'));\n          let navigationExtras: NavigationExtras = {\n            queryParams: {\n                \"email\": user[\"email\"],\n                \"firstName\": user[\"firstName\"],\n                \"lastName\": user[\"lastName\"],\n            }\n        };\n          this.router.navigate(['home'], navigationExtras);\n        }\n    }\n\n    login() {\n        this.loginService.login(this.email.value, this.password.value)\n        .subscribe(data=>{\n          if(data) {\n\n            this.loginService.getUserDeatislFromApi(this.email.value)\n            .subscribe(data=>{\n              let user = new User();\n              user[\"email\"] = data[\"email\"];\n              user[\"firstName\"] = data[\"firstName\"];\n              user[\"lastName\"] = data[\"lastName\"];\n              this.authenticationService.login(user);\n              let navigationExtras: NavigationExtras = {\n                queryParams: {\n                    \"email\": data[\"email\"],\n                    \"firstName\": data[\"firstName\"],\n                    \"lastName\": data[\"lastName\"],\n                }\n            };\n            this.router.navigate(['home'], navigationExtras);\n            }, error=>{\n                alert(\"Issue fetching the user detials\");\n            });            \n            \n          } else {\n            alert(\"User name password do not match\");\n          }\n          \n        }, error=>{\n          alert(\"There was error Logging in!Please try latter\")\n        })\n        console.warn(this.loginForm.value);\n      }\n\n      // not needed\n      getUserDeatils(email: string) {\n        // this.loginService.\n\n      }\n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n    // loginForm: FormGroup;\n    // loading = false;\n    // submitted = false;\n    // returnUrl: string;\n\n    \n\n    \n    // // convenience getter for easy access to form fields\n    // get f() { return this.loginForm.controls; }\n\n    // onSubmit() {\n    //     this.submitted = true;\n\n    //     // stop here if form is invalid\n    //     if (this.loginForm.invalid) {\n    //         return;\n    //     }\n\n    //     this.loading = true;\n    //     this.authenticationService.login(this.f.username.value, this.f.password.value)\n    //         .pipe(first())\n    //         .subscribe(\n    //             data => {\n    //                 this.router.navigate([this.returnUrl]);\n    //             },\n    //             error => {\n    //                 alert(\"there is an error\");\n    //                 this.loading = false;\n    //             });\n    // }\n\n}\n","<div>\n    <h2>Login</h2>\n   <form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\">\n    <label>\n        User Name:\n        <input type=\"text\" formControlName=\"email\">\n      </label>\n    \n      <label>\n        Password:\n        <input type=\"password\" formControlName=\"password\">\n      </label>\n      <button type=\"submit\" [disabled]=\"!loginForm.valid\">Submit</button>\n   </form>   \n</div>\n<button mat-raised-button color=\"primary\" [routerLink]=\"['registration']\">Register</button>\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject , of} from 'rxjs';\nimport { ApiService } from '../../core/api.service';\nimport { constant } from '../../constant/const';\nimport { User } from '../../models/User'\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginService {\n\n  private userDetails: BehaviorSubject<User>;\n\n  constructor(private apiService: ApiService) {\n    let user: User = null;\n    this.userDetails = new BehaviorSubject<User>(user);\n   }\n\n  login(email: string, pwd: string) : Observable<any> {\n    // return this.apiService.get(constant.urls.login +\"?email=\"+email+\"&pwd=\"+pwd);\n    return of([{name:\"sucess\"}]);\n  }\n\n  // not needed\n  setUser(u : User) : void {\n    this.userDetails.next(u);\n  }\n  \n  // not needed\n  getUser(): Observable<User> {\n    return this.userDetails.asObservable();\n  }\n\n  // not needed\n  getUserDeatislFromApi(email: string) {\n     return this.apiService.get(constant.urls.getUserDeatils + \"?email=\"+email);\n  }\n}\n","import { Component, OnInit } from '@angular/core';\n\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FormBuilder, FormGroup, Validators, FormControl } from '@angular/forms';\n\nimport { AuthenticationService } from '../../services/authentication.service';\nimport { User } from 'src/app/models/User';\nimport { RegistrationService } from './registration.service';\n\n@Component({\n  selector: 'app-registration',\n  templateUrl: './registration.component.html',\n  styleUrls: ['./registration.component.scss']\n})\nexport class RegistrationComponent implements OnInit {\n\n\n  registrationForm: FormGroup;\n  firstName: FormControl;\n  lastName: FormControl;\n  email: FormControl;\n  password: FormControl;\n  confirmPassword: FormControl\n\n  constructor(private registrationService: RegistrationService, private route: Router) { }\n\n  ngOnInit(): void {\n    this.firstName = new FormControl('', Validators.required);\n    this.lastName = new FormControl('', Validators.required);\n    this.email = new FormControl('', [\n      Validators.required,\n      Validators.email\n    ]);\n    this.password = new FormControl('', [\n      Validators.required,\n      Validators.minLength(8),\n      Validators.maxLength(32),\n      // Validators.pattern(\"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|\\]).{8,32}\")\n      // Validators.pattern(\"^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[$@$!%*?&])[A-Za-z\\d$@$!%*?&].{8,}$\")\n      Validators.pattern('(?=.*[A-Za-z])(?=.*[0-9])(?=.*[$@$!#^~%*?&,.<>\"\\'\\\\;:\\{\\\\\\}\\\\\\[\\\\\\]\\\\\\|\\\\\\+\\\\\\-\\\\\\=\\\\\\_\\\\\\)\\\\\\(\\\\\\)\\\\\\`\\\\\\/\\\\\\\\\\\\]])[A-Za-z0-9\\d$@].{7,}')\n    ]);\n    // this.confirmPassword = new FormControl('',\n    //   [Validators.compose(\n    //     [Validators.required,\n    //     // Validators.pattern(\"^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[*.!@$%^&(){}[]:;<>,.?/~_+-=|\\]).{8,32}\"),\n    //     // this.validatePassword.bind(this)\n    //   ]\n    //   )]\n    // );\n\n    this.registrationForm = new FormGroup({\n      firstName: this.firstName,\n      lastName: this.lastName,\n      email: this.email,\n      password: this.password\n      // confirmPassword: this.confirmPassword\n    })\n  }\n\n  registerUser() {\n\n    let user: User = {\n      firstName: this.firstName.value,\n      lastName: this.lastName.value,\n      email: this.email.value,\n      password: this.password.value\n    }\n    console.warn(this.registrationForm.value);\n    this.registrationService.registerUser(user)\n      .subscribe((data => {\n        alert(\"User created Successfully. Please login\");\n        this.route.navigateByUrl(\"\");\n      }), error => {\n        alert(\"There was a problem creating User! Please try again later\");\n      });\n  }\n\n  validatePassword(confirmControl: FormControl): { [key: string]: boolean } | null  {\n    if(this.password.value == this.confirmPassword.value) {\n      return { 'ageRange': false };\n    } else {\n      return { 'ageRange': true };;\n    }\n    \n  }\n\n}\n","<h2>Register</h2>\n<form [formGroup]=\"registrationForm\" (ngSubmit)=\"registerUser()\">\n  <div>\n    <label>\n      First Name:\n      <input id=\"firstName\" type=\"text\" formControlName=\"firstName\">\n    </label>\n    <div *ngIf=\"firstName.invalid && (firstName.dirty || firstName.touched)\" class=\"alert alert-danger\">\n\n      <div *ngIf=\"firstName.errors.required\" style=\"color: red;\">\n        First Name is required.\n      </div>\n    </div>\n  </div>\n\n\n  <div>\n    <label>\n      Last Name:\n      <input id=\"lastName\" type=\"text\" formControlName=\"lastName\">\n    </label>\n    <div *ngIf=\"lastName.invalid && (lastName.dirty || lastName.touched)\" class=\"alert alert-danger\">\n\n      <div *ngIf=\"firstName.errors.required\" style=\"color: red;\">\n        Last Name is required.\n      </div>\n    </div>\n  </div>\n\n  <div>\n    <label>\n      Email:\n      <input id=\"email\" type=\"text\" formControlName=\"email\">\n    </label>\n    <div *ngIf=\"email.invalid && (email.dirty || email.touched)\" class=\"alert alert-danger\">\n\n      <div *ngIf=\"email.errors.required\" style=\"color: red;\">\n        Last Name is required.\n      </div>\n      <div *ngIf=\"email.errors.email\" style=\"color: red;\">\n        Please provide a valid email id\n      </div>\n    </div>\n  </div>\n\n  <div>\n    <label>\n      Password:\n      <input id=\"password\" type=\"password\" formControlName=\"password\">\n    </label>\n    <div *ngIf=\"password.invalid && (password.dirty || password.touched)\" class=\"alert alert-danger\">\n\n      <div *ngIf=\"password.errors.required\" style=\"color: red;\">\n        Password is required.\n      </div>\n      <div *ngIf=\"password.errors.pattern || password.errors.minlength || password.errors.maxlength\" style=\"color: red;\">\n        Password must contain atleast a digit, a uppercase letter, a lowercase letter and must be\n        minimum 8 char long and maximun 32 characters long.\n      </div>\n    </div>\n  </div>\n\n  <!-- <div>\n    <label>\n      Confirm Password:\n      <input  formControlName=\"confirmPassword\">\n    </label>\n    <div *ngIf=\"confirmPassword.invalid && (confirmPassword.dirty || confirmPassword.touched)\" class=\"alert alert-danger\">\n      <div *ngIf=\"confirmPassword.errors.validatePassword\" style=\"color: red;\">\n        confirm Password value is required.\n      </div>\n    </div>\n  </div> -->\n\n  <button type=\"submit\" [disabled]=\"!registrationForm.valid\">Submit</button>\n\n</form>","import { Injectable } from '@angular/core';\nimport { ApiService } from 'src/app/core/api.service';\nimport { User } from 'src/app/models/User';\nimport { constant} from '../../constant/const'\nimport { Observable, of } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class RegistrationService {\n\n  constructor(private api: ApiService) { }\n\n  registerUser(user: User) {\n    return this.api.post(constant.urls.register, user);\n    // return of([{name:\"sucess\"}]);\n  }\n}\n","export const constant = {\n    \"urls\" : {\n        \"register\" : \"/api/registerUser\",\n        \"login\": \"/api/login\",\n        \"getUserDeatils\": \"api/userDetails\",\n        \"updateUserDetails\": \"api/updateUser\"\n    }\n}","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse} from '@angular/common/http';\nimport { User } from '../models/User';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n\n  constructor(private http: HttpClient) { }\n\n  post(url: string, user: User) : Observable<any> {\n    return this.http.post(url, user);\n  }\n\n  get(url: string, params?: any) {\n    return this.http.get(url);\n  }\n}\n","export class User {\n    id?: number;\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n    token?: string;\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatSliderModule } from '@angular/material/slider';\nimport { MatToolbarModule} from '@angular/material/toolbar';\nimport { MatButtonModule} from '@angular/material/button';\nimport {MatMenuModule} from '@angular/material/menu';\n\n\n\n@NgModule({\n  declarations: [],\n  imports: [\n    CommonModule,\n    MatSliderModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatMenuModule\n  ],\n  exports:[\n    MatSliderModule,\n    MatToolbarModule,\n    MatButtonModule,\n    MatMenuModule\n  ]\n})\nexport class AngularMatModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { User } from '../models/User';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n\n  private currentUserSubject: BehaviorSubject<User>;\n    public currentUser: Observable<User>;\n\n    constructor(private http: HttpClient) {\n        this.currentUserSubject = new BehaviorSubject<User>(JSON.parse(localStorage.getItem('currentUser')));\n        this.currentUser = this.currentUserSubject.asObservable();\n    }\n\n    public get currentUserValue(): User {\n        return this.currentUserSubject.value;\n    }\n\n    login(user: User) {\n                    localStorage.setItem('currentUser', JSON.stringify(user));\n                    this.currentUserSubject.next(user);\n    }\n\n    logout() {\n        // remove user from local storage to log user out\n        localStorage.removeItem('currentUser');\n        this.currentUserSubject.next(null);\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"]}